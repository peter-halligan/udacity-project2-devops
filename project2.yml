Parameters:
    EnvironmentName:
        Type: String
        Description: Name of the environment
        Default: Dev
    CIDR:
        Type: String
        Description: the CIDR block of project
        Default: ""

    PrivateSubnet1CIDR:
       Type: String
       Description: "Private Subnet 1 cidr"
    
    PrivateSubnet2CIDR:
       Type: String
       Description: "Private Subnet 2 cidr"

    PublicSubnet1CIDR:
       Type: String
       Description: "Public Subnet 1 cidr"
    
    PublicSubnet2CIDR:
       Type: String
       Description: "Public Subnet 2 cidr" 
    MyIP:
      Type: String
      Description: Public Ip of adress able to access bastion
    
    CodeBucket:
      Type: String
      Description: Name of bucket which release is stored
    
    ImageID:
      Type: String
      Description: AMI id for linux 2 which comes with awscli and other useful tools preinstalled
      Default: ami-0d6621c01e8c2de2c

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CIDR
      EnableDnsSupport: true
      Tags:
        - Key: env
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: env
          Value: !Ref EnvironmentName

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '' ]
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      Tags:
        - Key: env
          Value: !Ref EnvironmentName

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '' ]
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      Tags:
        - Key: env
          Value: !Ref EnvironmentName

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '' ]
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      Tags:
        - Key: env
          Value: !Ref EnvironmentName
  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '' ]
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      Tags:
        - Key: env
          Value: !Ref EnvironmentName

  NAT1:
   Type: AWS::EC2::NatGateway
   DependsOn: AttachGateway
   Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP1
        - AllocationId
      SubnetId: !Ref PublicSubnet1

  EIP1:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc

  NAT2:
   Type: AWS::EC2::NatGateway
   DependsOn: AttachGateway
   Properties:
      AllocationId:
         Fn::GetAtt:
         - EIP2
         - AllocationId
      SubnetId: !Ref PublicSubnet2

  EIP2:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc
  
  PublicRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref VPC
          Tags: 
            - Key: Name 
              Value: !Sub ${EnvironmentName} Public Routes
  
  DefaultPublicRoute1: 
        Type: AWS::EC2::Route
        DependsOn: AttachGateway
        Properties:
            RouteTableId: !Ref PublicRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway
  
  PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable1
            SubnetId: !Ref PublicSubnet1
  
  PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable1
            SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref VPC
          Tags: 
            - Key: Name 
              Value: !Sub ${EnvironmentName} Private Routes
  
  DefaultPrivateRoute1: 
        Type: AWS::EC2::Route
        DependsOn: AttachGateway
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NAT1
  
  PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1
  
  PrivateRouteTable2:
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref VPC
          Tags: 
            - Key: Name 
              Value: !Sub ${EnvironmentName} Private Routes subnet2
  
  DefaultPrivateRoute2: 
        Type: AWS::EC2::Route
        DependsOn: AttachGateway     
        Properties: 
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NAT2
  
  PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2
  
  WebserverSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow http to client host"
      GroupName: "WebserverSG"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  WebAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: AttachGateway
    Properties: 
      AutoScalingGroupName: webserverAutoscalingGroup
      AvailabilityZones: [ !Select [0, !GetAZs '' ], !Select [1, !GetAZs '' ]]
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      MaxSize: "2"
      MinSize: "2"
      Tags: 
        - Key: env
          Value: !Ref EnvironmentName
          PropagateAtLaunch: true
      TargetGroupARNs: 
        - !Ref WebAppTargetGroup
      VPCZoneIdentifier: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          usermod -a -G apache ec2-user
          chown -R ec2-user:apache /var/www
          cd /var/www/html
          aws s3 cp s3://${CodeBucket}/release.zip .
          unzip -o release.zip
      ImageId: !Ref ImageID
      IamInstanceProfile: !Ref ProfileS3ReadOnlyEC2
      SecurityGroups:
      - Ref: WebserverSG
      InstanceType: t3.small
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: 10

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      SecurityGroups:
      - Ref: WebserverSG

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: 80
      Protocol: HTTP

  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC
  
  ProfileS3ReadOnlyEC2:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref UdacityS3ReadOnlyEC2Role
  
  UdacityS3ReadOnlyEC2Role:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Description: Role to allow reading from bucket
      RoleName: UdacityS3ReadOnlyEC2Role
      Tags: 
        - Key: env
          Value: !Ref EnvironmentName
  
  ReadFRomBucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ReadFromProjectS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "s3:Get*"
              - "s3:List*"
            Resource: !Sub 'arn:aws:s3:::${CodeBucket}/*'
      Roles:
        - !Ref UdacityS3ReadOnlyEC2Role

Outputs:
  DNSName:
    Value:
      Fn::Join:
        - ""
        - - "http://"
          - !GetAtt WebAppLB.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-LBDNSName
  # outputs that can be used for the future deployment of ssh bastions
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCID
  
  VPCPublicSubnet1:
    Value: !Ref PublicSubnet1  
    Export: 
        Name: !Sub ${EnvironmentName}-PUSN1
  VPCPublicSubnet2:
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PUSN2
  
  PublicSubnets:
    Value: !Join [ ',', [ !Ref PublicSubnet1, !Ref PublicSubnet2]]
    Export:
      Name: !Sub ${EnvironmentName}-PUSNL

  